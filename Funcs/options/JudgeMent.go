package options

import (
	"Exploit/Data"
	"fmt"
	"io/ioutil"
	"os"
	"strings"
)

func JudgeMent(){
	// 将Exp中的通配符替换为命令
	LoadExpJson(Data.UserObject.JsonFile)
	Data.ExpJsonMap.Request.Data = strings.ReplaceAll(Data.ExpJsonMap.Request.Data,"(&)",Data.UserObject.Cmd)
	for key,_:= range Data.ExpJsonMap.Request.Header{
		Data.ExpJsonMap.Request.Header[key] = strings.ReplaceAll(Data.ExpJsonMap.Request.Header[key],"(&)",Data.UserObject.Cmd)
	}
	Data.ExpJsonMap.Request.Uri = strings.ReplaceAll(Data.ExpJsonMap.Request.Uri,"&",Data.UserObject.Cmd)

	// 处理Exp的Data数据

	Data.ReqData = strings.NewReader(Data.ExpJsonMap.Request.Data)

	// 处理url数据
	Data.UserObject.UriAddr = Data.UserObject.OriAddr + Data.ExpJsonMap.Request.Uri

	// 处理上传文件操作
	if Data.ExpJsonMap.Request.Upload.FilePath == ""{
		Data.RespObject.Resp = HClient(Data.ExpJsonMap.Request.Method,Data.UserObject.UriAddr,Data.ReqData,Data.ExpJsonMap.Request.Header,5)
	}else {
		Data.RespObject.Resp = UClient(Data.ExpJsonMap.Request.Method,Data.UserObject.UriAddr,Data.ReqData,Data.ExpJsonMap.Request.Header,5)
	}

	// 判断返回包结果是否满足操作了
	if Data.RespObject.Resp == nil {
		MistakPrint("Http Do Request failed")
		os.Exit(1)
	}else{
		body, err := ioutil.ReadAll(Data.RespObject.Resp.Body)
		if err != nil {
			MistakPrint("To read Response body failed")
			os.Exit(1)
		}
		Data.RespObject.Body = string(body)
		if strings.ToLower(Data.ExpJsonMap.Response.Steps) == `and` || strings.ToLower(Data.ExpJsonMap.Response.Steps) == `or` {
			for _,value := range Data.ExpJsonMap.Response.Checks{
				if value.Operation == `contains`{
					Data.JudgeStatus[`contains`] = strings.Contains(Data.RespObject.Body,value.Value)
				}
				if value.Operation == `code`{
					if fmt.Sprintf("%d",Data.RespObject.Resp.StatusCode) == value.Value{
						Data.JudgeStatus[`code`] = true
					}
				}
			}
			if strings.ToLower(Data.ExpJsonMap.Response.Steps) == `and` && Data.JudgeStatus[`contains`] == true && Data.JudgeStatus[`code`] == true {
				Data.FlageStatus = true
			}else if strings.ToLower(Data.ExpJsonMap.Response.Steps) == `or` && (Data.JudgeStatus[`contains`] == true || Data.JudgeStatus[`code`] == true) {
				Data.FlageStatus = true
			}else{
				Data.FlageStatus = false
			}
		}
	}
}
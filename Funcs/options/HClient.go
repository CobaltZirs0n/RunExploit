package options

import (
	"Exploit/Data"
	"bytes"
	"crypto/tls"
	"fmt"
	"io"
	"mime/multipart"
	"net/http"
	"net/http/cookiejar"
	"os"
	"time"
)

func HClient(method,url string,body io.Reader,Headers map[string]string,timeout time.Duration)(resp *http.Response){
	cookieJar, _ := cookiejar.New(nil)
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	client := &http.Client{Timeout:time.Second * timeout,Jar: cookieJar,Transport: tr}
	request ,err:=  http.NewRequest(method,url,body)
	if err != nil {
		MistakPrint("Create http Request failed")
		os.Exit(1)
	}
	SendPrint(url)
	/*这里遍历了请求头*/
	for key,value:= range Headers{
		request.Header.Add(key,value)
		SendPrint("---> "+key+":"+value)
	}
	/*这里执行请求操作，并返回请求体数据*/
	resp,err = client.Do(request)
	if err != nil {
		MistakPrint("Http Client do Request failed")
		os.Exit(1)
	}
	return resp
}
func UClient(method,url string,body io.Reader,Headers map[string]string,timeout time.Duration)(resp *http.Response){
	client := http.Client{}
	bodyBuf := &bytes.Buffer{}
	bodyWrite := multipart.NewWriter(bodyBuf)
	file, err := os.Open(Data.ExpJsonMap.Request.Upload.FilePath)
	if err != nil {
		MistakPrint("Can't Open " + Data.ExpJsonMap.Request.Upload.FilePath + "file")
		os.Exit(1)
	}
	defer file.Close()
	fileWrite, err := bodyWrite.CreateFormFile(Data.ExpJsonMap.Request.Upload.Name,Data.ExpJsonMap.Request.Upload.FileName)
	if err != nil {
		MistakPrint("CreateFormFile Failed,It will create HTTP Header")
		MistakPrint("form-data;name="+Data.ExpJsonMap.Request.Upload.Name+";filename="+Data.ExpJsonMap.Request.Upload.FileName)
		os.Exit(1)
	}
	_, err = io.Copy(fileWrite, file)
	if err != nil {
		MistakPrint("Copy file body to buffer failed")
		os.Exit(1)
	}
	bodyWrite.Close()
	// 创建请求
	contentType := bodyWrite.FormDataContentType()
	request, err := http.NewRequest(http.MethodPost,Data.UserObject.UriAddr, bodyBuf)
	if err != nil {
		MistakPrint("Create http Request failed")
		os.Exit(1)
	}
	SendPrint(url)
	request.Header.Set("Content-Type", contentType)
	fmt.Println("-----------------------------------------------------------------------------------------")
	for key,value:= range Headers{
		request.Header.Add(key,value)
		fmt.Println(key,value)
	}
	fmt.Println("Content-Type",contentType)
	resp,err = client.Do(request)
	if err != nil {
		MistakPrint("Http Client do Request failed")
		os.Exit(1)
	}
	return resp
}